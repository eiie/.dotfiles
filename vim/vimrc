" -------------------------
" Miscellaneous {{{
" -------------------------

" Enable ftplugins
filetype plugin indent on

" Compatibility
set nocompatible

" Show numbers
set number
set relativenumber

" Colors and themes
syntax on
colorscheme slate

" Indentation
set autoindent
set tabstop=8
set softtabstop=8
set shiftwidth=4

" Wildmenu
set wildmenu
"set wildmode=longest:full
"set wildmode=list,longest
set wildcharm=<C-Z>

" Buffers
set hidden " buffers can be hidden despite being modified

" Search
set hlsearch " Highlight searches
set incsearch " Start the search when typing
set smartcase " Ignore case when search is in lower-case

" Highlight matching parenthesis
set showmatch 

" Supress sounds
set visualbell
set noerrorbells

" Encoding
set encoding=UTF-8

" List chararacters
set listchars=tab:>-,eol:<,nbsp:%

" Fuzzy finder
set path+=**10

" Wrap lines
set wrap
" set textwidth=78

" Spell
set spelllang=en,fr

" set colorcolumn=80
" Set CursorLine to display CursorLineNR color
set cursorline

" ----------------------}}}
" Mappings {{{
" -------------------------

" Disable arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <right> <nop>
nnoremap <left> <nop>

vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <right> <nop>
vnoremap <left> <nop>

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <right> <nop>
inoremap <left> <nop>

" Resize window with arrows
nnoremap <Up>    :resize -2<CR>
nnoremap <Down>  :resize +2<CR>
nnoremap <Left>  :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>

" j and k occur on display lines instead of real lines
nnoremap j gj
nnoremap k gk

" gj and gk occur on real lines instead of display lines
nnoremap gj j
nnoremap gk k

" Replace C-W + hjkl by C-hjkl
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" Disable arrow keys in command line mode
cnoremap <up> <nop>
cnoremap <down> <nop>

" Make <C-p> and <C-n> filter the command history
cnoremap <C-p> <up>
cnoremap <C-n> <down>

" Keep selection in select mode after shifting
vnoremap > >gv
vnoremap < <gv

" Very magic mode for regex (use extended regex)
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap \>s/ \>smagic/
nnoremap :g/ :g/\v
nnoremap :g// :g//

" Quick yanking to the end of the line
nnoremap Y y$

" Indent all documents using g=
nnoremap g= mmgg=G`m

" ----------------------}}}
" Mappings - function keys {{{
" -------------------------

" Presentation mode (replace this with Goyo plugin ?)
nmap <F5> :set relativenumber! number! showmode! showcmd! hidden! ruler! <CR> :execute 'set showtabline=' . (&showtabline ==# 0 ? 2 : 0)<CR> :execute 'set laststatus=' . (&laststatus ==# 0 ? 2 : 0) <CR>

" Toggle list characters
nmap <F6> :set list! <CR>

" Toggle spellcheck
nmap <F7> :setlocal spell!<CR>

" Toggle highlight searches
nmap <F8> :set hls!<CR>

" ----------------------}}}
" Mappings - french azerty specific {{{
" -------------------------

" Go to mark
nmap è `
omap è `

" Swap case
vnoremap é ~
nnoremap é ~

" Easier brackets key mappings
nmap à ]
nmap ç [

" Remap 'go to next mark' for brackets
nnoremap çè [`
nnoremap àè ]`

" Remap bracket marks
nnoremap èç `[
nnoremap èà `]

" Go to last buffer
nnoremap ° <c-^>


" ----------------------}}}
" Mappings - leader key {{{
" -------------------------

" Set space as leader key
nnoremap <SPACE> <Nop>
let mapleader =" "

" Edit and source vimrc shortcuts
nnoremap <Leader>ev :tab new $MYVIMRC<cr>
nnoremap <Leader>sv :source $MYVIMRC<cr>

" Shortcut to trim blanks
nnoremap <Leader><Leader><space> :%s/\s\+$//e<cr>
nnoremap <Leader><Leader><tab> :%s/<space><tab>/<tab>/gc<cr>

" Shortcuts for the terminal
nnoremap <Leader>t :belowright terminal<cr><c-w>:resize -18<CR>

" Browse MRU files
nnoremap <Leader>u :browse oldfiles<CR>

" List and chosse buffer
nnoremap <leader>, :ls<CR>:b<Space>

" Switch CWD to the directory of the open buffer
nmap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>

" Paste from yank register
xnoremap <leader>p "0p
nnoremap <leader>p "0p

" ----------------------}}}
" Netrw {{{
" -------------------------

let g:netrw_banner=0
let g:netrw_liststyle=3
let g:netrw_browse_split=4
let g:netrw_winsize = 12
let g:netrw_altv=1
let g:netrw_cursor=0 " use user's cursor line settings in netrw

" Open netrw at startup
" augroup netrw
"	autocmd!
"	autocmd VimEnter * :Lexplore
"	autocmd
" augroup END

" Function toggle netrw
let g:NetrwIsOpen=0
function! ToggleNetrw()
    if g:NetrwIsOpen
	let i = bufnr("$")
	while (i >= 1)
	    if (getbufvar(i, "&filetype") == "netrw")
		silent exe "bwipeout " . i
	    endif
	    let i-=1
	endwhile
	let g:NetrwIsOpen=0
	silent :hi CursorLine term=none cterm=none ctermbg=none ctermfg=none
    else
	let g:NetrwIsOpen=1
	silent Vexplore"! for right side
	silent :hi CursorLine term=none cterm=none ctermbg=8
	silent :setlocal cursorline
    endif
endfunction

" Maping toggle netrw
nnoremap <silent> ù :call ToggleNetrw()<CR>

" ----------------------}}}
" Status line {{{
" -------------------------

set showmode

set laststatus=2 " always enable status line
set ruler " position in %
set statusline=%<\%0*\ %n\ %F\ %h%m%r%=%-14.(%l/%L,%c%V%)\ %P\ %{FugitiveStatusline()} " statusline with Fugitive
" set statusline=%<\%0*\ %n\ %F\ %h%m%r%=%-14.(%l/%L,%c%V%)\ %P\ %{b:git_branch}\ " statusline with functions below

" %< - where to truncate the line if too long
" %0* - restore normal highlight
" %n - buffer number
" %F - buffer name (path to a file, or something)
" %h - help flag
" %m - modified flag
" %r - readonly flag
" %= - separater between the left (buffer name) and the right (ruler) parts
" %-14.(...%) - minimum field width == 14
" %l - line
" %L - line (total)
" %c - column
" %V - virtual column
" %P - percentage

" Git branch for statusline
function Gitbranch()
    " return trim(system("git -C " . expand("%:h") . " branch --show-current 2>NUL")) " windows way
    return trim(system("git -C " . expand("%:h") . " branch --show-current 2>/dev/null")) " linux way
endfunction
augroup Gitget
    autocmd!
    autocmd BufEnter * let b:git_branch = Gitbranch()
augroup END

" ----------------------}}}
" Tab line {{{
" -------------------------

" set showtabline=1 " Only if there are at least two tab pages
set showtabline=2 " All the time

" --------------------}}}
" Folds {{{
" -------------------------

" Small foldcolumn
set foldcolumn=1

" Open and close folds automatically when jumping around
set foldopen=block,hor,mark,percent,quickfix,search,tag,undo
set foldclose=all

" ----------------------}}}
" Persistence {{{
" -------------------------

" History
set history=1000
set undolevels=1000

" Views
set viewdir=$HOME/.vim/view/
set viewoptions=folds,cursor,curdir

" Automatic mkview to remember folds
augroup vimrc
    autocmd BufWritePost *
		\   if expand('%') != '' && &buftype !~ 'nofile'
		\|      mkview
		\|  endif
    autocmd BufRead *
		\   if expand('%') != '' && &buftype !~ 'nofile'
		\|      silent loadview
		\|  endif
augroup END

" Persistent undo
set undodir=$HOME/.vim/undo/
set undofile

" .viminfo
set viminfo='500,f1,:500,<500,/500,%,s100,h,c
set viminfofile=$HOME/.viminfo

" "500 : file numbers to store marks
" f1 : save global marks
" :500 : lines in command-line history
" <500 : lines in registers
" /500 : lines in search history
" % : buffer list
" s100 : line marks limit in Kbyte
" h : disable hls when loading .viminfo
" c : encoding

" Sessions
set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal,slash,unix

" add shortcuts with leader key for making sessions and viminfo and restore it ?

" ---------------------}}}
" Colors {{{
" -------------------------

" StatusLine
highlight StatusLine		term=none cterm=none ctermfg=0 ctermbg=2	"status line of current window
highlight StatusLineNC		term=none cterm=none ctermfg=2 ctermbg=8	"status lines of not-current windows
au InsertEnter * hi StatusLine term=none cterm=none ctermbg=0 ctermbg=3		"status line when entering insert mode
au InsertLeave * hi StatusLine term=none cterm=none ctermfg=0 ctermbg=2		"reset when leaving insert mode

" Tabline
highlight TabLine		term=none cterm=none ctermfg=2 ctermbg=8	"tab pages line, not active tab page label
highlight TabLineFill		term=none cterm=none ctermfg=8 ctermbg=8	"tab pages line, where there are no labels
highlight TabLineSel		term=none cterm=none ctermfg=0 ctermbg=2	"tab pages line, active tab page label

" Cursor
highlight CursorLine    	term=none cterm=none ctermfg=none ctermbg=none " cursorline
highlight CursorColumn  	term=none cterm=none ctermfg=15 ctermbg=8	" cursor column

" Wildmenu
highlight Wildmenu      	term=none cterm=none ctermfg=2 ctermbg=8	" wildmenu

" Column
highlight ColorColumn   	term=none cterm=none ctermfg=15 ctermbg=8	" cursor column

" Terminal
highlight StatusLineTerm	term=none cterm=none ctermfg=8 ctermbg=4	"status line of current window
highlight StatusLineTermNC	term=none cterm=none ctermfg=4 ctermbg=8	"status lines of not-current windows
highlight Terminal		term=none cterm=none ctermfg=15 ctermbg=0	"terminal window

" Splits
highlight VertSplit		term=none cterm=none ctermfg=8 ctermbg=0	"vertical split

" Numbers
highlight LineNR 		term=none cterm=none ctermfg=8 ctermbg=0	"numbers on the ruler
highlight CursorLineNR		term=none cterm=none ctermfg=2 ctermbg=0	"cursor number on the ruler

" Folds
highlight Folded		term=none cterm=none ctermfg=2 ctermbg=0	"fold
highlight FoldColumn		term=none cterm=none ctermfg=0 ctermbg=0	"fold column (ruler)

" Pop-up menu
highlight Pmenu			term=none cterm=none ctermfg=15 ctermbg=8	"normal item
highlight PmenuSel		term=none cterm=none ctermfg=8 ctermbg=2	"selected item
highlight PmenuSbar		term=none cterm=none ctermfg=0 ctermbg=15	"scrollbar
highlight PmenuThumb		term=none cterm=none ctermfg=0 ctermbg=2	"thumb of scrollbar

" Quickfix list
    highlight QuickFixLine		term=none cterm=none ctermbg=4 ctermfg=0	"quickfix list

    "0 -> Black
    "2 -> Green
    "3 -> Yellow
    "4 -> Blue
    "8 -> Grey
    "15 -> White

    " ----------------------}}}
    " Plugins configurations and bindings {{{
    " -------------------------

    function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=number
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	" find function and variables
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    " find function and variables on workspace directory
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    "    nmap <buffer> gi <plug>(lsp-implementation) " change : useful in vim
    "    nmap <buffer> gt <plug>(lsp-type-definition) " change : useful in vim
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    " nmap <buffer> K <plug>(lsp-hover) " change : useful in vim
    " nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    " nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" autocomplete options
set completeopt=menuone,noinsert,noselect,preview

" asyncomplete-file registration
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
	    \ 'name': 'file',
	    \ 'allowlist': ['*'],
	    \ 'priority': 10,
	    \ 'completor': function('asyncomplete#sources#file#completor')
	    \ }))

" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"

" asyncomplete-Ultisnips registration
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
	    \ 'name': 'ultisnips',
	    \ 'whitelist': ['*'],
	    \ 'completor': function('asyncomplete#sources#ultisnips#completor')
	    \ }))

" asyncomplete-buffer registration
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
	    \ 'name': 'buffer',
	    \ 'allowlist': ['*'],
	    \ 'blocklist': ['go'],
	    \ 'completor': function('asyncomplete#sources#buffer#completor'),
	    \ 'config': {
	    \    'max_buffer_size': 5000000,
	    \  },
	    \ }))

" tmuxcomplete registration
let g:tmuxcomplete#asyncomplete_source_options = {
	    \ 'name':      'tmuxcomplete',
	    \ 'whitelist': ['*'],
	    \ 'config': {
	    \     'splitmode':      'words',
	    \     'filter_prefix':   1,
	    \     'show_incomplete': 1,
	    \     'sort_candidates': 0,
	    \     'scrollback':      0,
	    \     'truncate':        0
	    \     }
	    \ }

" ----------------------}}}
" Work in progress {{{
" -------------------------

let g:markdown_folding=1

au BufRead,BufNewFile *.md setfiletype markdown

" linter for shell script with shellcheck (use builtin :make % to populate
" quickfixlist)
au FileType sh setlocal makeprg=shellcheck\ -fgcc

" other ideas :
" mapping qc, ql, etc. to open quickfix list / location list windows
" mapping : Fugitive

set cm=blowfish2
" use gpg or pgp with autocommand instead ?

" ----------------------}}}

" vim: foldmethod=marker:foldmarker={{{,}}}
