      " _ _ _____                 _
  " ___(_) |___ /          __   _(_)_ __ ___  _ __ ___
 " / _ \ | | |_ \   _____  \ \ / / | '_ ` _ \| '__/ __|
" |  __/ | |___) | |_____|  \ V /| | | | | | | | | (__
 " \___|_|_|____/            \_/ |_|_| |_| |_|_|  \___|

"------------------------
" Miscellaneous {{{
" -------------------------

" Enable ftplugins
filetype plugin indent on

" Compatibility
set nocompatible

" Show numbers
set number
set relativenumber

" Colors and themes
syntax on
colorscheme slate

" Indentation
set autoindent
set tabstop=2
set shiftwidth=2
set softtabstop=-1 " TODO use value of shiftwidth

" Convert tab to space
set expandtab

" Wildmenu / wildmode
set wildmenu
set wildmode=longest:list
",full
set wildcharm=<C-Z>
set wildignorecase " Ignore case in wildmode

" Buffers
set hidden " buffers can be hidden despite being modified

" Search
set hlsearch " Highlight searches
set incsearch " Start the search when typing
set ignorecase " Ignore case when searching
set smartcase " Override ignorecase when search an uppercase character

" Highlight matching parenthesis
set showmatch

" Suppress sounds
set novisualbell
set noerrorbells

" Encoding
set encoding=UTF-8

" List characters
set listchars=tab:>-,eol:<,nbsp:%,trail:·

" Fuzzy finder
set path+=**10

" Wrap lines
set wrap

" Text width
set textwidth=0

" Spell
set spelllang=en,fr
set spellsuggest=20

" Set CursorLine to display CursorLineNR color
set cursorline

" Cursor can move freely in visual block mode
set virtualedit=block

" Autocomplete options
set completeopt=menuone,noinsert,noselect,preview

" Disable mouse
set mouse=""

" source abbreviations file
source $HOME/.vim/abbrev

" ----------------------}}}
" Mappings {{{
" -------------------------

vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <right> <nop>
vnoremap <left> <nop>

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <right> <nop>
inoremap <left> <nop>

" Disable ex mode mapping
map Q gq

" Resize window with arrows
nnoremap <Up>    :resize -2<cr>
nnoremap <Down>  :resize +2<cr>
nnoremap <Left>  :vertical resize -2<cr>
nnoremap <Right> :vertical resize +2<cr>

" j and k occur on display lines instead of real lines
nnoremap j gj
nnoremap k gk

" gj and gk occur on real lines instead of display lines
nnoremap gj j
nnoremap gk k

" Disable arrow keys in command line mode
cnoremap <up> <nop>
cnoremap <down> <nop>

" Emacs-style editing on the command-line: >
" start of line
cnoremap <C-A>		<Home>
" back one character
cnoremap <C-B>		<Left>
" delete character under cursor
cnoremap <C-D>		<Del>
" end of line
cnoremap <C-E>		<End>
" forward one character
cnoremap <C-F>		<Right>
" recall newer command-line
cnoremap <C-N>		<Down>
" recall previous (older) command-line
cnoremap <C-P>		<Up>
" back one word
cnoremap <Esc><C-B>	<S-Left>
" forward one word
cnoremap <Esc><C-F>	<S-Right>

" Keep selection in select mode after shifting
vnoremap > >gv
vnoremap < <gv

" Very magic mode for regex (use extended regex)
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap \>s/ \>smagic/
nnoremap :g/ :g/\v
nnoremap :g// :g//

" Quick yanking to the end of the line
nnoremap Y y$

" Indent all documents using g=
nnoremap g= mmgg=G`m

" open lists more easily
nnoremap qc :copen<cr><cr>
nnoremap ql :lopen<cr><cr>
" buffers list
nnoremap qb :call setqflist(getbufinfo({'buflisted':1}))<cr>:copen<cr>
" jump list (:jumps)
nnoremap qj :call setqflist(getjumplist()[0])<cr>:copen<cr>
" change list (:changes)
nnoremap qm :call setqflist(map(getchangelist(bufnr())[0], {key, val -> {"bufnr": bufnr(), "col": val.col, "lnum": val.lnum }}))<cr>:copen<cr>
" tag list (:tags)
nnoremap qt :call setqflist(gettagstack().items)<cr>:copen<cr>

" undo list (:undolist) => undotree
" argument list (:args)
" marks list (:marks)

" ilist & dlist

" Remap c-w s-n to esc
tnoremap <Esc> <C-w><S-n>

" Better scroll in insert mode
inoremap <C-E> <C-X><C-E>
inoremap <C-Y> <C-X><C-Y>

" ----------------------}}}
" Mappings - function keys {{{
" -------------------------

" Presentation mode (replace this with Goyo plugin ?)
nmap <F5> :set relativenumber! number! showmode! showcmd! hidden! ruler! <cr> :execute 'set showtabline=' . (&showtabline ==# 0 ? 2 : 0)<cr> :execute 'set laststatus=' . (&laststatus ==# 0 ? 2 : 0) <cr>

" ----------------------}}}
" Mappings - french azerty specific {{{
" -------------------------

" Go to mark
nmap è `
omap è `

" Swap case
vnoremap é ~
nnoremap é ~

" Easier brackets key mappings
nmap à ]
nmap ç [

" Remap 'go to next mark' for brackets
nnoremap çè [`
nnoremap àè ]`

" Remap bracket marks
nnoremap èç `[
nnoremap èà `]

" Go to last buffer
nnoremap ° <c-^>

" Find remap for c-] because c-$ does not work for me here
" nnoremap <c-à> <c-]>

" ----------------------}}}
" Mappings - leader key {{{
" -------------------------

" Set space as leader key
nnoremap <SPACE> <Nop>
let mapleader =" "

" Edit and source vimrc shortcuts
nnoremap <Leader>ev :tab new $MYVIMRC<cr><cr>
nnoremap <Leader>sv :source $MYVIMRC<cr>

" Shortcut to trim blanks
nnoremap <Leader><Leader><space> :%s/\s\+$//e<cr>
nnoremap <Leader><Leader><tab> :%s/<space><tab>/<tab>/gc<cr>

" Shortcuts for the terminal and shell
nnoremap <silent> <Leader>te :terminal ++curwin<cr>
nnoremap <silent> <Leader>st :belowright terminal<cr><c-w>:resize 12<cr>
nnoremap <silent> <Leader>tt :tab terminal<cr>
nnoremap <Leader>sh :shell<cr>
nnoremap <silent> <c-w>t :vertical rightbelow terminal<cr>

" Browse MRU files
nnoremap <Leader>ol :browse oldfiles<cr>

" Buffers
nnoremap <leader>ls :ls<cr>
nnoremap <leader>bd :bufdo bdelete<cr>

" Switch CWD to the directory of the open buffer
nmap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>

" Paste from yank register
xnoremap <leader>p "0p
nnoremap <leader>p "0p

" Git mapping (for fugitive tpope plugin)
nnoremap <leader>gs :G <cr>
nnoremap <leader>gc :Git commit -v -q <cr>
nnoremap <leader>gd :Git diff <cr>
nnoremap <leader>gp :Git push <cr>
nnoremap <leader>gl :GV <cr>
nnoremap <leader>gg yaw:silent Ggrep <c-r>"<cr>:copen<cr>
nnoremap <leader>gG yaW:silent Ggrep <c-r>"<cr>:copen<cr>

" Make mapping
nnoremap <leader>ma :make <cr> <cr>

" Date and time
nnoremap <leader>da :put=strftime('%d/%m/%Y')<cr>
nnoremap <leader>ho :put=strftime('%H:%M')<cr>

" Lists
nnoremap <leader>ql :lopen <cr>
nnoremap <leader>qc :copen <cr>
nnoremap <leader>qq :copen <cr>
nnoremap <leader>qd :LspDocumentDiagnostics <cr>

" Grep
nnoremap <leader>vg yaw:vimgrep <c-r>" **<cr>:copen<cr>
nnoremap <leader>gr yaw:silent grep -rsi <c-r>" ./<cr><c-l>:copen<cr>
nnoremap <leader>Gr yaW:silent grep -rsi <c-r>" ./<cr><c-l>:copen<cr>

" Tabs
nnoremap <c-w><Leader>& 1gt
noremap <leader>& 1gt
noremap <leader>é 2gt
noremap <leader>" 3gt
noremap <leader>' 4gt
noremap <leader>( 5gt

" Ansible-vault encrypt decrypt
nnoremap <leader>ivd :!ansible-vault decrypt --vault-password-file=~/ansible-vault-integration.txt %<cr>
nnoremap <leader>ive :!ansible-vault encrypt --vault-password-file=~/ansible-vault-integration.txt %<cr>
nnoremap <leader>vvd :!ansible-vault decrypt --vault-password-file=~/ansible-vault-preprod.txt %<cr>
nnoremap <leader>vve :!ansible-vault encrypt --vault-password-file=~/ansible-vault-preprod.txt %<cr>
nnoremap <leader>pvd :!ansible-vault decrypt --vault-password-file=~/ansible-vault-prod.txt %<cr>
nnoremap <leader>pve :!ansible-vault encrypt --vault-password-file=~/ansible-vault-prod.txt %<cr>
" TODO: create function that detect environment and use corresponding
" credentials

nnoremap <leader>ss :mksession! $HOME/.vim/session/
nnoremap <leader>sl :source $HOME/.vim/session/

" open url
nnoremap <leader>ou :!firefox <c-r><c-a><cr><cr>

" ----------------------}}}
" Netrw {{{
" -------------------------

let g:netrw_banner=0		"Suppress the banner
let g:netrw_liststyle=3		"Tree style listing
let g:netrw_browse_split=0	"Open in the same window
let g:netrw_winsize = 20	"Set netrw window size
let g:netrw_altv=1		"Left splitting
let g:netrw_cursor=0		"Use user's cursor line settings in netrw
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+' "hide dotfiles (gh to show them)
let g:netrw_preview=1 "Preview in a vertical split
hi! link netrwMarkFile Search "highlight  marked files

" Function toggle netrw
let g:NetrwIsOpen=0
function! ToggleNetrw()
    if g:NetrwIsOpen
	let i = bufnr("$")
	while (i >= 1)
	    if (getbufvar(i, "&filetype") == "netrw")
		silent exe "bwipeout " . i
	    endif
	    let i-=1
	endwhile
	let g:NetrwIsOpen=0 "Open in the same window
  let g:netrw_browse_split=0
	silent :hi CursorLine term=none cterm=none ctermbg=none ctermfg=none
    else
	let g:NetrwIsOpen=1
  let g:netrw_browse_split=4 "Open in previous window when netrw is used in a split
	silent Vexplore"! for right side
	silent :hi CursorLine term=none cterm=none ctermbg=8
	silent :setlocal cursorline
    endif
endfunction

" Maping toggle netrw
nnoremap <silent> ù :call ToggleNetrw()<cr>

" Start vim on current directory
augroup VimStartup
 au!
 au VimEnter * if expand("%") == "" | e . | endif
augroup END


" ----------------------}}}
" Terminal {{{
" -------------------------

" Avoid nested vim
function! Tapi_vit(bufnum, arglist)
	let currfile = get(a:arglist, 0, '')
	if empty(currfile)
		return
	endif
	execute 'e' currfile
endfunction

" terminal window config
autocmd TerminalWinOpen * setlocal nonu nornu

" ----------------------}}}
" Status line {{{
" -------------------------

set showmode
set laststatus=2 " always enable status line
set ruler " position in %

set statusline=
set statusline+=%<
set statusline+=%#GitStatusLine#
set statusline+=\ %n
set statusline+=\ %0*
set statusline+=\ %f
set statusline+=\ %0*
set statusline+=\ %h
set statusline+=%m
set statusline+=%r
set statusline+=%=
set statusline+=(%l/%L,%c%V)
set statusline+=\ %P
set statusline+=\ %y
set statusline+=\ %#GitStatusLine#\ %{FugitiveStatusline()}

" %0* - restore normal highlight
" %n - buffer number
" %F - buffer name (path to a file, or something)
" %h - help flag
" %m - modified flag
" %r - readonly flag
" %= - separater between the left (buffer name) and the right (ruler) parts
" %-14.(...%) - minimum field width == 14
" %l - line
" %L - line (total)
" %c - column
" %V - virtual column
" %P - percentage
" %y - filetype

" ----------------------}}}
" Tab line {{{
" -------------------------

set showtabline=1 " Only if there are at least two tab pages
" set showtabline=2 " All the time

" --------------------}}}
" Folds {{{
" -------------------------

" Small foldcolumn
set foldcolumn=1

" Open and close folds automatically when jumping around
set foldopen=block,hor,mark,percent,quickfix,search,tag,undo
set foldclose=all

" ----------------------}}}
" Persistence {{{
" -------------------------

" History
set history=1000

" Views
set viewdir=$HOME/.vim/view/
set viewoptions=folds,cursor,curdir

" Automatic mkview to remember folds
augroup vimrc
    autocmd BufWritePost *
		\   if expand('%') != '' && &buftype !~ 'nofile'
		\|      mkview
		\|  endif
    autocmd BufRead *
		\   if expand('%') != '' && &buftype !~ 'nofile'
		\|      silent loadview
		\|  endif
augroup END

" Persistent undo
set undodir=$HOME/.vim/undo/
set undofile
set undolevels=1000

" .viminfo
set viminfo='500,f1,:500,<500,/500,%,s100,h,c
set viminfofile=$HOME/.vim/viminfo

" "500 : file numbers to store marks
" f1 : save global marks
" :500 : lines in command-line history
" <500 : lines in registers
" /500 : lines in search history
" % : buffer list
" s100 : line marks limit in Kbyte
" h : disable hls when loading .viminfo
" c : encoding

" Sessions
set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal,slash,unix

" ---------------------}}}
" Colors {{{
" -------------------------

set background=light

" Normal
highlight Normal ctermfg=15 ctermbg=0

" StatusLine
highlight StatusLine		term=none cterm=none ctermfg=0 ctermbg=2	"status line of current window
highlight StatusLineNC		term=none cterm=none ctermfg=2 ctermbg=8	"status lines of not-current windows

" Tabline
highlight TabLine		term=none cterm=none ctermfg=2 ctermbg=8	"tab pages line, not active tab page label
highlight TabLineFill		term=none cterm=none ctermfg=8 ctermbg=8	"tab pages line, where there are no labels
highlight TabLineSel		term=none cterm=none ctermfg=0 ctermbg=2	"tab pages line, active tab page label

" Cursor
highlight CursorLine    	term=none cterm=none ctermfg=none ctermbg=none	" cursorline
highlight CursorColumn  	term=none cterm=none ctermfg=15 ctermbg=8	" cursor column

" Wildmenu
highlight Wildmenu      	term=none cterm=none ctermfg=2 ctermbg=8	" wildmenu

" Column
highlight ColorColumn   	term=none cterm=none ctermfg=15 ctermbg=8	" cursor column

set colorcolumn=0

" Terminal
highlight StatusLineTerm	term=none cterm=none ctermfg=5 ctermbg=0	"status line of current window
highlight StatusLineTermNC	term=none cterm=none ctermfg=8 ctermbg=0	"status lines of not-current windows
highlight Terminal		term=none cterm=none ctermfg=15 ctermbg=0	"terminal window

" Splits
highlight VertSplit		term=none cterm=none ctermfg=8 ctermbg=0	"vertical split

" Numbers
highlight LineNR 		term=none cterm=none ctermfg=8 ctermbg=0	"numbers on the ruler
highlight CursorLineNR		term=none cterm=none ctermfg=2 ctermbg=0	"cursor number on the ruler

" Folds
highlight Folded		term=none cterm=none ctermfg=2 ctermbg=0	"fold
highlight FoldColumn		term=none cterm=none ctermfg=0 ctermbg=0	"fold column (ruler)

" Pop-up menu
highlight Pmenu			term=none cterm=none ctermfg=15 ctermbg=8	"normal item
highlight PmenuSel		term=none cterm=none ctermfg=8 ctermbg=2	"selected item
highlight PmenuSbar		term=none cterm=none ctermfg=0 ctermbg=15	"scrollbar
highlight PmenuThumb		term=none cterm=none ctermfg=0 ctermbg=2	"thumb of scrollbar

" Quickfix list
highlight QuickFixLine		term=none cterm=none ctermbg=4 ctermfg=0	"quickfix list

" GitStatusLine
highlight GitStatusLine		term=none cterm=none ctermbg=0 ctermfg=2	"git status line

"0 -> Black, 2 -> Green, 3 -> Yellow, 4 -> Blue, 8 -> Grey, 15 -> White

" ----------------------}}}
" Plugins (configuration and mappings) {{{
" -------------------------

" lsp {{{

function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=number
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	" find function and variables
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    " find function and variables on workspace directory
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    "    nmap <buffer> gi <plug>(lsp-implementation) " change : useful in vim
    "    nmap <buffer> gt <plug>(lsp-type-definition) " change : useful in vim
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    " nmap <buffer> K <plug>(lsp-hover) " change : useful in vim
    nmap <buffer> <leader>K <plug>(lsp-hover) " change : useful in vim
    " nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    " nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
    let g:lsp_format_sync_timeout = 1000
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

"}}}
" lsp server {{{
" terraform lsp server configuration
if executable('terraform-ls')
    au User lsp_setup call lsp#register_server({
            \ 'name': 'terraform-ls',
            \ 'cmd': {server_info->['terraform-ls', 'serve']},
            \ 'whitelist': ['terraform'],
            \ })
endif

" ansible lsp server configuration
if executable('ansible-language-server')
    au User lsp_setup call lsp#register_server({
            \ 'name': 'ansible-language-server',
            \ 'cmd': {server_info->['ansible-language-server','--stdio']},
            \ 'whitelist': ['yaml.ansible'],
            \ })
endif
"}}}
" asyncomplete regsitration {{{

" asyncomplete-file asyncomplete registration
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
	    \ 'name': 'file',
	    \ 'allowlist': ['*'],
	    \ 'priority': 10,
	    \ 'completor': function('asyncomplete#sources#file#completor')
	    \ }))

" asyncomplete-buffer asyncomplete registration
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
	    \ 'name': 'buffer',
	    \ 'allowlist': ['*'],
	    \ 'blocklist': ['go'],
	    \ 'completor': function('asyncomplete#sources#buffer#completor'),
	    \ 'config': {
	    \    'max_buffer_size': 5000000,
	    \  },
	    \ }))

" tmuxcomplete asyncomplete registration
let g:tmuxcomplete#asyncomplete_source_options = {
	    \ 'name':      'tmuxcomplete',
	    \ 'whitelist': ['*'],
	    \ 'config': {
	    \     'splitmode':      'words',
	    \     'filter_prefix':   1,
	    \     'show_incomplete': 1,
	    \     'sort_candidates': 0,
	    \     'scrollback':      0,
	    \     'truncate':        0
	    \     }
	    \ }
"}}}
" vsnip {{{

" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-j>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-j>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        s   <Plug>(vsnip-select-text)
xmap        s   <Plug>(vsnip-select-text)
nmap        S   <Plug>(vsnip-cut-text)
xmap        S   <Plug>(vsnip-cut-text)

" If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.
let g:vsnip_filetypes = {}
let g:vsnip_filetypes.yaml = ['jinja2']
" let g:vsnip_filetypes.typescriptreact = ['typescript']
"}}}
" other {{{
" Undotree
nmap <F8> : UndotreeToggle<cr>
"}}}

" ----------------------}}}
" Filetype {{{
" -------------------------

augroup filetypedetect
  " Terraform
  au BufNewFile,BufRead *.tf setf terraform
  " Jinja
  au BufNewFile,BufRead *.j2 setf jinja
  " Markdown
  au BufNewFile,BufRead *.md setf markdown
  " GPG
  au BufNewFile,BufRead *.gpg setf gpg
augroup END

" Add filetype ansible for yml in ansible repo
" example : au BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible

" ----------------------}}}
" Encryption {{{
" -------------------------

" Encryption algorithm
set cm=blowfish2

" https://vim.fandom.com/wiki/Encryption
" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff
augroup encrypted
  au!
  " First make sure nothing is written to ~/.viminfo while editing
  " an encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg set viminfo=
  " We don't want a various options which write unencrypted data to disk
  autocmd BufReadPre,FileReadPre *.gpg set noswapfile noundofile nobackup
  " Switch to binary mode to read the encrypted file
  autocmd BufReadPre,FileReadPre *.gpg set bin
  autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
  " (If you use tcsh, you may need to alter this line.)
  autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null
  " Switch to normal mode for editing
  autocmd BufReadPost,FileReadPost *.gpg set nobin
  autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
  " Convert all text to encrypted text before writing
  " (If you use tcsh, you may need to alter this line.)
  autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
  " Undo the encryption so we are back in the normal text, directly
  " after the file has been written.
  autocmd BufWritePost,FileWritePost *.gpg u
augroup END

" ----------------------}}}
" Work in progress {{{
" -------------------------

" TODO :
" mapping : Fugitive

" command / find bookmarks
" autocmd BufNewFile,BufRead *.bkm set filetype=vimbookmarks syntax=vim
" autocmd FileType vimbookmarks map <buffer> <silent> <cr> yy:tabnew<cr>:<c-r>"<cr>
" map <leader>bk :tabnew ~/test.bkm<cr>

" When starting to edit a new file, you could make Vim insert a skeleton:
"         :autocmd BufNewFile *.[ch]  0read ~/skeletons/skel.c

" ----------------------}}}
" Archive {{{
" -------------------------

"  ---
"  Mappings
"  ---

" Disable arrow keys
" nnoremap <up> <nop>
" nnoremap <down> <nop>
" nnoremap <right> <nop>
" nnoremap <left> <nop>

" Replace C-W + hjkl by C-hjkl
" noremap <C-j> <C-w>j
" noremap <C-k> <C-w>k
" noremap <C-l> <C-w>l
" noremap <C-h> <C-w>h

"  ---
"  Mappings - function keys
"  ---

" Toggle list characters
" to remove cause "yol" do the same in unimpaired tpope plugin
" nmap <F6> :set list! <cr>

" Toggle spellcheck
" to remove cause "yoz" do the same in unimpaired tpope plugin
" nmap <F7> :setlocal spell!<cr>

" Toggle highlight searches
" to remove cause "yoh" do the same in unimpaired tpope plugin
" nmap <F8> :set hls!<cr>

"  ---
"  Netrw
"  ---

" Open netrw at startup
" augroup netrw
"	autocmd!
"	autocmd VimEnter * :Lexplore
"	autocmd
" agroup END

"  ---
"  Statusline
"  ---

" set statusline=%<\%0*\ %n\ %F\ %h%m%r%=%-14.(%l/%L,%c%V%)\ %P\ %{b:git_branch}\ " statusline with functions below

" " Git branch for statusline
" function Gitbranch()
"     " return trim(system("git -C " . expand("%:h") . " branch --show-current 2>NUL")) " windows way
"     return trim(system("git -C " . expand("%:h") . " branch --show-current 2>/dev/null")) " linux way
" endfunction
" augroup Gitget
"     autocmd!
"     autocmd BufEnter * let b:git_branch = Gitbranch()
" augroup END

" au InsertEnter * hi StatusLine term=none cterm=none ctermbg=0 ctermbg=3		"status line when entering insert mode
" au InsertLeave * hi StatusLine term=none cterm=none ctermfg=0 ctermbg=2		"reset when leaving insert mode

" " asyncomplete-Ultisnips registration
" au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
" 	    \ 'name': 'ultisnips',
" 	    \ 'whitelist': ['*'],
" 	    \ 'completor': function('asyncomplete#sources#ultisnips#completor')
" 	    \ }))

" " Ultisnips
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" let g:UltiSnipsEditSplit="vertical"
" " let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']

" vim: foldmethod=marker:foldmarker={{{,}}}
