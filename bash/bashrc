      # _ _ _____           _               _
  # ___(_) |___ /          | |__   __ _ ___| |__  _ __ ___
 # / _ \ | | |_ \   _____  | '_ \ / _` / __| '_ \| '__/ __|
# |  __/ | |___) | |_____| | |_) | (_| \__ \ | | | | | (__
 # \___|_|_|____/          |_.__/ \__,_|___/_| |_|_|  \___|

# -------------
# Completion {{{
# -------------
[[ $- != *i* ]] && return
[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# ------------- }}}
# Colors {{{
# -------------
colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
	else
		PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

xhost +local:root > /dev/null 2>&1


# ------------- }}}
# shopt {{{
# -------------
# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize
shopt -s expand_aliases
# Enable history appending instead of overwriting.  #139609
shopt -s histappend
# Complete hosts when @ is use
shopt -s hostcomplete

# set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully. This option is disabled by default. posix Change the behavior of bash where the default operation differs from the POSIX standard to match the standard (posix mode).
#set -o pipefail

# ------------- }}}
# Functions {{{
# -------------
ext () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf "$1"   ;;
      *.tar.gz)    tar xzf "$1"   ;;
      *.bz2)       bunzip2 "$1"   ;;
      *.rar)       unrar x "$1"     ;;
      *.gz)        gunzip "$1"    ;;
      *.tar)       tar xf "$1"    ;;
      *.tbz2)      tar xjf "$1"   ;;
      *.tgz)       tar xzf "$1"   ;;
      *.zip)       unzip "$1"     ;;
      *.Z)         uncompress "$1";;
      *.7z)        7z x "$1"      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# vim terminal in tmux session
ts () {
	tmux ls | grep "^default:"
	if [[ $? -eq 1 ]] ; then
		tmux new -d -s "default" -n "default"
		tmux send-keys -t default:default "vim -S $HOME/.vim/terminal_session.vim" Enter
	fi
	tmux a -t default:default
}

# vim terminal session
vs () {
	vim -S $HOME/.vim/terminal_session.vim
}

# mans

mans ()
  if [ $# -eq 2 ]; then
    man "$1" | col -bx | sed -n "/^ *$2/,/^$/p"
  else
    man "$1" | col -bx | sed -n "/^DESCRIPTION/,/^$/p"
  fi

compare_vault(){
  continue="true"
  if [[ "$#" -ne 3 ]]
  then
    echo "Usage: compare_vault <vault1> <vault2> <password-file>"
    continue="false"
  fi
  if [[ $continue == "true" ]]
  then
    firstfile=$1
    secondfile=$2
    passwordfile=$3

    a=$(ansible-vault view --vault-password-file $3 $1)
    b=$(ansible-vault view --vault-password-file $3 $2)

    if [[ $a == $b ]]
    then
      echo "Vault are the same"
    else
      echo "Vault are different"
    fi
    unset a
    unset b
  fi
}

rdp(){
  e=$1 ; xfreerdp /v:$(pass show $e | grep url | cut -d ' ' -f 2) /u:$(pass show $e | grep username | cut -d ' ' -f 2) /p:$(pass $e | sed 1q) /dynamic-resolution +clipboard
}

# ------------- }}}
# Prompt {{{
# -------------
PS1=' \[\e[0;92m\]$([[ $SHLVL > 1 ]] && echo $SHLVL) \w \[\e[0;96m\]$(git branch 2>/dev/null | grep --color=never '"'"'^*'"'"' | colrm 1 2) \[\e[0;92m\]> \[\e[0m\]'

# ------------- }}}
# Source {{{
# -------------
source ~/.bash_aliases

# ------------- }}}
# Incremental search instead of suspend {{{
# -------------
if [[ -t 0 && $- = *i* ]]
then
	stty -ixon
fi

# ------------- }}}
# Common {{{
# -------------
export EDITOR=vim
export LANG=en_US.UTF-8
export PATH=$HOME/.local/bin:$PATH

# ------------- }}}
# XDG {{{
# -------------
export XDG_CONFIG_HOME=~/.config
export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

# ------------- }}}
# History {{{
# -------------
export HISTFILE=$HOME/.bash_history
export HISTSIZE=10000
export HISTFILESIZE=100000
export HISTCONTROL=$HISTCONTROL:ignorespace:ignoredups
export HISTTIMEFORMAT="[%F %H:%M]  "

# ------------- }}}
# sfeed {{{
# -------------

export SFEED_URL_FILE="$HOME"/.sfeed/urls
[ -f "$SFEED_URL_FILE" ] || touch "$SFEED_URL_FILE"

# vim: foldmethod=marker:foldmarker={{{,}}}
